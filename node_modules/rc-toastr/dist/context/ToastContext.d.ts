import * as React from 'react';
import { Toast, Variant } from '../types';
declare type Tvarients = {
    (message: string, variant?: Variant): Toast['id'];
    success: (message: string) => void;
    error: (message: string) => void;
    warning: (message: string) => void;
    info: (message: string) => void;
    default: (message: string) => void;
    loading: <T>(promise: Promise<T>, { loading, success, error }: {
        loading: string;
        success: string | ((data: T) => void);
        error: string | ((error: unknown) => void);
    }) => Promise<T>;
};
declare type ToastContext = {
    toast: Tvarients;
    close: (id: number) => void;
    clearToasts: () => void;
    config: RequiredConfig;
    updateConfig: (config: RequiredConfig) => void;
    toasts: Toast[];
};
declare type Config = {
    duration?: number;
    position?: 'top' | 'bottom' | 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
    pauseOnHover?: boolean;
    autoClose?: boolean;
    showProgressBar?: boolean;
    zIndex?: number;
    maxToasts?: number;
    renderToastIcon?: (type: Toast['type']) => JSX.Element;
    toastBackgroundColor?: (type: Toast['type']) => string;
    renderAs?: ({ toast, onClose, visible, showProgressBar, progress }: {
        toast: Toast;
        onClose: (id: number) => void;
        visible: boolean;
        showProgressBar: boolean;
        progress: number;
    }) => JSX.Element | React.ReactElement;
};
declare type RequiredConfig = {
    [K in keyof Config]-?: Config[K];
};
declare const ToastContext: React.Context<ToastContext>;
export declare const useToast: () => ToastContext;
export declare const ToastProvider: ({ children, config: _config }: {
    children: JSX.Element;
    config?: Config | undefined;
}) => JSX.Element;
export {};
